// 一、javascript预编译与运行

/**
 *  javascript相对于其它语言来说是一种弱类型的语言，
 *  在其它如java语言中，程序的执行需要有编译的阶段，
 *  而在javascript中也有类似的“预编译阶段”（javascript的预编译是以代码块为范围<script></script>，
 *  即每遇到一个代码块都会进行预编译>执行）
 */

// javascript中的两种声明方式，var和function，前者声明的是变量，后者声明的是方法.

// 以下代码分两个阶段：预编译 和 运行

var a = "1"

function b() {
    // 函数声明
    alert();
}
var c = function () {
    alert();
}

// 1. 在预编译中，开辟内存

var a = undefined;
var c = undefined;

/**
 * 预编译总结
 * 1、先预定义变量，再预定义函数
 * 2、变量的预编译只作声明，不作初始化，初始化在执行时
 * 3、function语句定义的函数，不仅声明了函数名，而且函数体也进行了处理
 * 4、匿名函数不会预编译
 */

// 2. 在运行时，赋值

a = "1";
c = function () {
    alert();　
}

// 对于函数声明，则同样会进行开辟内存空间，但赋值的对象会将声明的函数赋值给函数名

/**
 * 二、概述
 * 在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。前者用于服务器，后者用于浏览器。
 */

/**
 * ES6模块与AMD,CMD区别
 * ES6 模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量
 * CommonJS 和 AMD 模块，都只能在运行时确定这些东西。
 */

/**
 * 三、严格模式
 * ES6 的模块自动采用严格模式，不管你有没有在模块头部加上"use strict";。
 * ES6 模块之中，顶层的this指向undefined，即不应该在顶层代码使用this。
 */

/**
 * 四、export 命令
 * 1.模块功能主要由两个命令构成：export和import。export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。
 * 2.export命令可以出现在模块的任何位置，只要处于模块顶层就可以。如果处于块级作用域内，就会报错。这是因为处于条件代码块之中，就没法做静态优化了，违背了 ES6 模块的设计初衷。
 */

/**
 * 五、import 命令
 * 使用export命令定义了模块的对外接口以后，其他 JS 文件就可以通过import命令加载这个模块。
 */
